---
apiVersion: batch/v1
kind: Job
metadata:
  name: modelcar-user-pipelines-create
  namespace: openshift-gitops
  annotations:
    argocd.argoproj.io/sync-wave: "5"
spec:
  template:
    spec:
      serviceAccountName: openshift-gitops-argocd-application-controller
      containers:
      - name: shell
        image: quay.io/luisarizmendi/ocp-job:latest  
        command: ["/bin/sh", "-c"]
        args:
        - |

          apply_with_retries() {
            local attempt=0
            local max_attempts=5
            local delay=5

            while true; do
              if "$@"; then
                echo "Apply succeeded: $*"
                return 0
              fi

              attempt=$(( attempt + 1 ))
              if [ "$attempt" -ge "$max_attempts" ]; then
                echo "Apply failed after $max_attempts attempts: $*"
                return 1
              fi

              echo "Apply failed, retrying in $delay seconds... (attempt $attempt)"
              sleep "$delay"
            done
          }


          while true; do
              if oc get tasks.tekton.dev -n default &> /dev/null; then
                  echo "Tekton API (tekton.dev/v1) is ready"
                  break
              fi
            sleep 10
          done

          # Loop through users user01 to user50 and user99
          for i in $(seq -w 1 50) 99; do
            username="user$i"
            pipeline_namespace="${username}-tools"

            while true; do
                if oc get namespace "$pipeline_namespace" &> /dev/null; then
                    echo "Namespace $pipeline_namespace has been created"
                    break
                fi
                sleep 10
            done    






          apply_with_retries  oc apply -f - <<EOFUP
          ---
          apiVersion: v1
          kind: PersistentVolumeClaim
          metadata:
            name: ai-modelcar-pvc
            namespace: $pipeline_namespace
          spec:
            accessModes:
              - ReadWriteOnce
            resources:
              requests:
                storage: 5Gi
          EOFUP


          echo "Creating modelcar-containerfile-create Task"
          apply_with_retries  oc apply -f - <<EOFUP
          ---
          apiVersion: tekton.dev/v1
          kind: Task
          metadata:
            name: modelcar-containerfile-create
            namespace: $pipeline_namespace
          spec:
            workspaces:
              - name: data
                description: "The workspace to store the downloaded files"
            steps:
              - name: generate-containerfile
                image: registry.access.redhat.com/ubi8/ubi-minimal:latest
                script: |
                  #!/usr/bin/env bash
                  echo 'FROM registry.access.redhat.com/ubi9/ubi-micro:9.4' > \$(workspaces.data.path)/Containerfile
                  echo 'COPY ./models /models' >> \$(workspaces.data.path)/Containerfile
                  echo 'USER 1001' >> \$(workspaces.data.path)/Containerfile

              - name: create-models-dir
                image: registry.access.redhat.com/ubi8/ubi-minimal:latest
                script: |
                  #!/usr/bin/env bash
                  mkdir -p \$(workspaces.data.path)/models
          EOFUP

          echo "Creating modelcar-download-model Task"
          apply_with_retries  oc apply -f - <<EOFUP
          ---
          apiVersion: tekton.dev/v1
          kind: Task
          metadata:
            name: modelcar-download-model
            namespace: $pipeline_namespace
          spec:
            params:
              - name: objectApiUrl
                type: string
              - name: objectBucket
                type: string
              - name: objectAccessKey
                type: string
              - name: objectSecretKey
                type: string
              - name: directoryPath
                type: string
            workspaces:
              - name: data
                description: "The workspace to store the downloaded files"
            steps:
              - computeResources: {}
                image: 'quay.io/luisarizmendi/s3cmd:latest'
                name: download-from-object
                script: |
                  #!/usr/bin/env sh
                  set -e

                  # Create s3cmd config
                  cat > /tmp/.s3cfg << EOF
                  [default]
                  access_key = \$(params.objectAccessKey)
                  secret_key = \$(params.objectSecretKey)
                  host_base = \$(params.objectApiUrl)
                  host_bucket = \$(params.objectApiUrl)
                  use_https = True
                  signature_v2 = False
                  # Disable SSL verification
                  check_ssl_certificate = False
                  check_ssl_hostname = False
                  EOF

                  # Create target directory for recursive copy
                  rm -rf \$(workspaces.data.path)/models
                  mkdir -p \$(workspaces.data.path)/models

                  echo "Copying from Object Storage in \$(params.objectBucket)/\$(params.directoryPath)/ to \$(workspaces.data.path)/models/"

                  # Use s3cmd to copy the directory
                  s3cmd -c /tmp/.s3cfg get --recursive s3://\$(params.objectBucket)/\$(params.directoryPath)/ \$(workspaces.data.path)/models/

                  # Check if the download was successful
                  if [ \$? -ne 0 ]; then
                    echo "Failed to download files from object storage"
                    exit 1
                  fi

                  echo "----- \$(workspaces.data.path) ------"
                  ls \$(workspaces.data.path)
                  echo "-----------"

          EOFUP


          echo "Creating podman-build-and-push Task"
          apply_with_retries  oc apply -f - <<EOF
          ---
          apiVersion: tekton.dev/v1
          kind: Task
          metadata:
            name: podman-build-and-push
            namespace: $pipeline_namespace
          spec:
            params:
              - name: IMAGE
                description: Full image name including registry
              - name: CONTAINERFILE
                description: Path to Containerfile
                default: ./Containerfile
              - name: CONTEXT
                description: Build context
                default: ./
              - name: PLATFORMS
                description: Comma-separated target platforms (e.g., linux/amd64,linux/arm64)
                default: linux/amd64,linux/arm64
            workspaces:
              - name: source
              - name: dockerconfig
                optional: true
                mountPath: /root/quay-local-push-secret
            steps:
              - name: build-and-push
                image: quay.io/podman/stable:latest
                securityContext:
                  privileged: true  # Required for QEMU & binfmt_misc
                  runAsUser: 0
                workingDir: \$(workspaces.source.path)
                script: |
                  #!/bin/bash
                  set -e
                  echo "Enabling binfmt_misc for cross-arch builds..."
                  podman run --rm --privileged docker.io/multiarch/qemu-user-static --reset -p yes
                  export IMAGE=\$(params.IMAGE)
                  IMAGE="\${IMAGE#http://}"
                  IMAGE="\${IMAGE#https://}"
                  IMAGE="\${IMAGE//\/\//\/}"
                  echo "Creating multiarch manifest: \$IMAGE"
                  for arch in \$(echo \$(params.PLATFORMS) | tr ',' ' '); do
                    tag="\${arch//\//-}"
                    echo "Building for \$arch -> \$tag"
                    podman build --platform \${arch##*/} -f \$(params.CONTAINERFILE) -t \$IMAGE-\$tag \$(params.CONTEXT)
                    podman push --authfile=/root/quay-local-push-secret/.dockerconfigjson \$IMAGE-\$tag
                  done

                  echo "Creating and pushing manifest list..."
                  podman manifest create \$IMAGE
                  for arch in \$(echo \$(params.PLATFORMS)  | tr ',' ' '); do
                    tag="\${arch//\//-}"
                    podman manifest add \$IMAGE \$IMAGE-\$tag
                  done
                  podman manifest push --authfile=/root/quay-local-push-secret/.dockerconfigjson --all \$IMAGE docker://\$IMAGE

          EOF



          echo "Creating ai-modelcar Pipeline"
          apply_with_retries  oc apply -f - <<EOFUP
          ---
          apiVersion: tekton.dev/v1
          kind: Pipeline
          metadata:
            name: ai-modelcar
            namespace: $pipeline_namespace
          spec:
            params:
              - name: object-api-url
                type: string
                description: "Object Storage  API URL"
              - name: object_access_key
                type: string
                description: "Object Storage Access-Key"
              - name: object_secret_key
                type: string
                description: "Object Storage Secret-Key"
              - name: object-bucket
                type: string
                description: "Object Storage bucket name"
              - name: object-directory-path
                type: string
                description: "Path to the directory in the object bucket to download"
              - name: bootc-image-name
                type: string
                description: "Name of the image to push"
              - name: container-registry-image-tag
                type: string
                description: "Tag for the image to push"
              - name: container-registry
                type: string
                description: "Container Registry URL"


            workspaces:
              - name: shared-workspace
                description: "Workspace used for sharing data between tasks"
              - name: podman-credentials
                description: "Secret with the container registry credentials"

            tasks:

              - name: containerfile-create
                taskRef:
                  name: modelcar-containerfile-create
                  kind: Task
                workspaces:
                  - name: data
                    workspace: shared-workspace 


              - name: get-model-file
                runAfter:
                  - containerfile-create
                taskRef:
                  name: modelcar-download-model
                  kind: Task
                params:
                  - name: objectApiUrl
                    value: \$(params.object-api-url)
                  - name: objectBucket
                    value: \$(params.object-bucket)
                  - name: objectAccessKey
                    value: \$(params.object_access_key)
                  - name: objectSecretKey
                    value: \$(params.object_secret_key)
                  - name: directoryPath
                    value: \$(params.object-directory-path)
                workspaces:
                  - name: data
                    workspace: shared-workspace 



              - name: build-and-push
                runAfter:
                  - get-model-file
                taskRef:
                  name: podman-build-and-push
                  kind: Task
                params:
                  - name: IMAGE
                    value: \$(params.container-registry)/\$(params.bootc-image-name):\$(params.container-registry-image-tag)
                workspaces:
                  - name: source
                    workspace: shared-workspace
                  - name: dockerconfig
                    workspace: podman-credentials                 
  
          EOFUP




          done 

          echo "Environment ready!"
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - "ALL"
          runAsNonRoot: true
          seccompProfile:
            type: RuntimeDefault
      restartPolicy: OnFailure
  backoffLimit: 1


---
apiVersion: batch/v1
kind: Job
metadata:
  name: bootc-user-pipelines-create
  namespace: openshift-gitops
  annotations:
    argocd.argoproj.io/sync-wave: "5"
spec:
  template:
    spec:
      serviceAccountName: openshift-gitops-argocd-application-controller
      containers:
      - name: shell
        image: quay.io/luisarizmendi/ocp-job:latest  
        command: ["/bin/sh", "-c"]
        args:
        - |

          apply_with_retries() {
            local attempt=0
            local max_attempts=5
            local delay=5

            while true; do
              if "$@"; then
                echo "Apply succeeded: $*"
                return 0
              fi

              attempt=$(( attempt + 1 ))
              if [ "$attempt" -ge "$max_attempts" ]; then
                echo "Apply failed after $max_attempts attempts: $*"
                return 1
              fi

              echo "Apply failed, retrying in $delay seconds... (attempt $attempt)"
              sleep "$delay"
            done
          }

          while true; do
              if oc get tasks.tekton.dev -n default &> /dev/null; then
                  echo "Tekton API (tekton.dev/v1) is ready"
                  break
              fi
            sleep 10
          done

          # Loop through users user01 to user50 and user99
          for i in $(seq -w 1 50) 99; do
            username="user$i"
            pipeline_namespace="${username}-tools"

            while true; do
                if oc get namespace "$pipeline_namespace" &> /dev/null; then
                    echo "Namespace $pipeline_namespace has been created"
                    break
                fi
                sleep 10
            done    


          apply_with_retries  oc apply -f - <<EOFUP
          ---
          apiVersion: v1
          kind: PersistentVolumeClaim
          metadata:
            name: bootc-build-shared-pvc
            namespace: $pipeline_namespace
          spec:
            accessModes:
              - ReadWriteOnce
            resources:
              requests:
                storage: 5Gi
          ---
          apiVersion: tekton.dev/v1
          kind: Pipeline
          metadata:
            name: bootc-image-build
            namespace: $pipeline_namespace
          spec:
            params:
              - name: bootc-build-files-repo-url
                description: "Repo url with bootc image build files"
                type: string
              - name: bootc-build-files-repo-branch
                description: "Repo branch where bootc image build files are located"
                type: string
                default: "main"
              - name: bootc-build-files-repo-subpath
                description: "Repo subpath where bootc image build files are located"
                default: "."
                type: string
              - name: bootc-image-name
                type: string
                description: "Full image name including registry and tag, for example 'my.registry.io/user/image:tag'"
              - name: bootc-build-export-formats
                description: "Comma-separated target files extensions to be exported (e.g., anaconda-iso,qcow2)"
                default: ""
                type: string
              - name: bootc-build-platforms
                description: "Comma-separated target platforms (e.g., linux/amd64,linux/arm64)"
                default: linux/amd64,linux/arm64
                type: string
              - name: object-storage-endpoint
                description: "Object Storage endpoint where the exported files will be uploaded"
                default: "s3.openshift-storage.svc:443"
                type: string
              - name: object-storage-bucket
                description: "Object Storage bucket where the exported files will be uploaded"
                default: "${username}-bootc-exports"
                type: string

            workspaces:
              - name: shared-workspace
                description: "Workspace used for sharing data between tasks"
              - name: redhat-pull-secret
                description: "Secret with the Red Hat container registry pull credentials"
              - name: quay-local-push-secret
                description: "Secret with the credentials to push the image"
              - name: redhat-credentials
                description: "Secret with the Red Hat cuer and password"
              - name: store
                description: "EmptyDir for creating qcow2/ISO"
              - name: rpmmd
                description: "EmptyDir for creating qcow2/ISO"
              - name: varlibcontainerstorage
                description: "EmptyDir for creating qcow2/ISO"

            tasks:
              - name: get-build-files
                taskRef:
                  name: git-clone-and-copy-subpath
                  kind: Task
                params:
                  - name: bootc-build-files-repo-url
                    value: \$(params.bootc-build-files-repo-url)
                  - name: bootc-build-files-repo-branch
                    value: \$(params.bootc-build-files-repo-branch)
                  - name: bootc-build-files-repo-subpath
                    value: \$(params.bootc-build-files-repo-subpath)
                workspaces:
                  - name: output
                    workspace: shared-workspace 

              - name: build-push-and-export
                runAfter:
                  - get-build-files
                taskRef:
                  name: bootc-build-push-and-export
                  kind: Task
                params:
                  - name: IMAGE
                    value: \$(params.bootc-image-name)
                  - name: PLATFORMS
                    value: \$(params.bootc-build-platforms)
                  - name: EXPORTS
                    value: \$(params.bootc-build-export-formats)
                workspaces:
                  - name: source
                    workspace: shared-workspace
                  - name: redhat-credentials
                    workspace: redhat-credentials
                  - name: redhat-pull-secret
                    workspace: redhat-pull-secret
                  - name: quay-local-push-secret
                    workspace: quay-local-push-secret
                  - name: store
                    workspace: store
                  - name: rpmmd
                    workspace: rpmmd
                  - name: varlibcontainerstorage
                    workspace: varlibcontainerstorage


              - name: upload-exports
                runAfter:
                  - build-push-and-export
                taskRef:
                  name: upload-files-object-storage
                  kind: Task
                when:
                  - input: "\$(params.bootc-build-export-formats)"
                    operator: notin
                    values: ["", '""', "''"] 
                params:
                  - name: STORAGE-ENDPOINT
                    value: \$(params.object-storage-endpoint)
                  - name: STORAGE-BUCKET
                    value: \$(params.object-storage-bucket)
                  - name: SUBPATH
                    value: "exports"
                workspaces:
                  - name: source
                    workspace: shared-workspace
                  - name: object-storage-credentials
                    workspace: shared-workspace


          ---
          apiVersion: tekton.dev/v1
          kind: Task
          metadata:
            name: bootc-build-push-and-export
            namespace: $pipeline_namespace
          spec:
            params:
              - name: IMAGE
                description: Full image name including registry
              - name: CONTAINERFILE
                description: Path to Containerfile
                default: ./Containerfile
              - name: CONTEXT
                description: Build context
                default: ./
              - name: PLATFORMS
                description: Comma-separated target platforms (e.g., linux/amd64,linux/arm64)
                default: linux/amd64,linux/arm64
              - name: EXPORTS
                description: Comma-separated target files extensions to be exported (e.g., anaconda-iso,qcow2)
                default: ""
            workspaces:
              - name: source
              - name: redhat-pull-secret
                optional: true
                mountPath: /root/redhat-pull-secret
              - name: quay-local-push-secret
                optional: true
                mountPath: /root/quay-local-push-secret
              - name: redhat-credentials
                optional: true
                mountPath: /root/redhat-credentials
              - name: store
                mountPath: /store
              - name: rpmmd
                mountPath: /rpmmd
              - name: varlibcontainerstorage
                mountPath: /var/lib/containers/storage
            steps:
              - name: build-push-and-export
                image: quay.io/centos-bootc/bootc-image-builder:latest
                securityContext:
                  privileged: true  # Required for QEMU & binfmt_misc
                  runAsUser: 0
                  seLinuxOptions:
                    type: container_file_t
                workingDir: \$(workspaces.source.path)
                script: |
                  #!/bin/bash
                  set -e
                  export IMAGE=\$(params.IMAGE)
                  IMAGE="\${IMAGE#http://}"
                  IMAGE="\${IMAGE#https://}"
                  IMAGE="\${IMAGE//\/\//\/}"
                  IMAGE_NAME_TAG="\${IMAGE##*/}"
                  IMAGE_NAME="\${IMAGE_NAME_TAG%%:*}"
                  IMAGE_TAG="\${IMAGE_NAME_TAG##*:}" 

                  echo "Enabling binfmt_misc for cross-arch builds..."
                  podman run --rm --privileged docker.io/multiarch/qemu-user-static --reset -p yes

                  echo "-------------------------------------------------------------------------------"
                  echo "Creating multiarch manifest: \$IMAGE"
                  for arch in \$(echo \$(params.PLATFORMS) | tr ',' ' '); do
                    tag="\${arch//\//-}"
                    echo "Building for \$arch -> \$tag"

                    if [ -d "/root/redhat-credentials" ]; then
                      echo "Building with Red Hat credentials..."
                      podman build --authfile /root/redhat-pull-secret/.dockerconfigjson \
                                  --volume /root/redhat-credentials:/run/secrets:ro \
                                  --platform \${arch##*/} -f \$(params.CONTAINERFILE) -t \$IMAGE-\$tag \$(params.CONTEXT)
                    else
                      podman build --authfile /root/redhat-pull-secret/.dockerconfigjson \
                                  --platform \${arch##*/} -f \$(params.CONTAINERFILE) -t \$IMAGE-\$tag \$(params.CONTEXT)
                    fi

                    podman push --authfile=/root/quay-local-push-secret/.dockerconfigjson \$IMAGE-\$tag
                    
                  done
                  echo "Creating and pushing manifest list..."
                  podman manifest create \$IMAGE
                  for arch in \$(echo \$(params.PLATFORMS)  | tr ',' ' '); do
                    tag="\${arch//\//-}"
                    podman manifest add \$IMAGE \$IMAGE-\$tag
                  done
                  podman manifest push --authfile=/root/quay-local-push-secret/.dockerconfigjson --all \$IMAGE docker://\$IMAGE


                  echo "-------------------------------------------------------------------------------"
                  if [ -n "\$(params.EXPORTS)" ]; then
                    echo "Starting the image export."

                    for arch in \$(echo \$(params.PLATFORMS) | tr ',' ' '); do
                      IMAGE_TAG="\${IMAGE_TAG//./_}"
                      DIR_NAME="\${IMAGE_NAME}_\${IMAGE_TAG}_\${arch##*/}"
                      rm -rf exported && mkdir -p exported/\$DIR_NAME

                      tag="\${arch//\//-}"
                      # Convert comma-separated to space-separated
                      IFS=',' read -ra items <<< "\$(params.EXPORTS)"
                      echo "Converting to: \${items[@]}" 

                      for item in "\${items[@]}"; do
                        echo "Exporting \$item ..."

                        podman run \
                          --platform=\${arch##*/}
                          --rm \
                          --privileged \
                          --pull=newer \
                          --security-opt label=type:unconfined_t \
                          -v ./config.toml:/config.toml:ro \
                          -v ./exported/\$DIR_NAME:/output \
                          -v \$(workspaces.varlibcontainerstorage.path):/var/lib/containers/storage \
                          quay.io/centos-bootc/bootc-image-builder:latest --type \$item --use-librepo=True \$IMAGE-\$tag
                      done
                    done

                    echo "Files exported:"
                    ls -R exported/
                  fi


          ---
          apiVersion: tekton.dev/v1
          kind: Task
          metadata:
            name: upload-files-object-storage
            namespace: $pipeline_namespace
          spec:
            params:
              - name: STORAGE-ENDPOINT
                description: The object storage endpoint URL
                type: string
              - name: STORAGE-BUCKET
                description: The object storage bucket name
                type: string
              - name: SUBPATH
                description: Subdirectory path where the files are hosted
                type: string
                default: "."
              - name: REGION
                description: The object storage region
                type: string
                default: "local"
            workspaces:
              - name: source
                description: Workspace where the files are contained
              - name: object-storage-credentials
                description: Secret with the object storage credentials
            steps:
              - name: upload-files
                image: quay.io/luisarizmendi/ocp-job:latest
                env:
                - name: AWS_ACCESS_KEY_ID
                  valueFrom:
                    secretKeyRef:
                      name: \$(workspaces.object-storage-credentials.secret.secretName)
                      key: AWS_ACCESS_KEY_ID
                - name: AWS_SECRET_ACCESS_KEY
                  valueFrom:
                    secretKeyRef:
                      name: \$(workspaces.object-storage-credentials.secret.secretName)
                      key: AWS_SECRET_ACCESS_KEY
                script: |
                  #!/bin/sh
                  set -e
                  export AWS_REGION="\$(params.REGION)"
                  export AWS_ENDPOINT_URL="\$(params.STORAGE-ENDPOINT)"
                  export BUCKET="\$(params.STORAGE-BUCKET)"
                  export SUBPATH="\$(params.SUBPATH)"
                  
                  cd \$(workspaces.source.path)/\${SUBPATH}
                  
                  echo "Files to be uploaded from \$(pwd):"
                  find . -type f | sort
                                   
                  echo "Uploading files to s3://\${BUCKET}/\${SUBPATH}"
                  aws s3 sync . s3://\${BUCKET}/\${SUBPATH} \
                    --endpoint-url=\${AWS_ENDPOINT_URL} \
                    --no-progress
                  
                  echo "Upload completed successfully"
                  echo "Objects in bucket:"
                  aws s3 ls s3://\${BUCKET}/\${SUBPATH} --recursive --endpoint-url=\${AWS_ENDPOINT_URL}

          ---
          apiVersion: tekton.dev/v1
          kind: Task
          metadata:
            name: git-clone-and-copy-subpath
            namespace: $pipeline_namespace
          spec:
            params:
              - name: bootc-build-files-repo-url
                description: The git repository URL to clone
              - name: bootc-build-files-repo-branch
                description: The branch to checkout
                default: main
              - name: bootc-build-files-repo-subpath
                description: Subdirectory path to copy from the cloned repo
                default: "."
            workspaces:
              - name: output
                description: Target workspace where the files will be copied
            steps:
              - name: clone-and-copy
                image: alpine/git:latest
                script: |
                  #!/bin/sh
                  set -e

                  echo "Cloning repo: \$(params.bootc-build-files-repo-url)"
                  rm -rf /tmp/repo && git clone --depth 1 --branch \$(params.bootc-build-files-repo-branch) \$(params.bootc-build-files-repo-url) /tmp/repo

                  echo "Copying subpath: \$(params.bootc-build-files-repo-subpath)"
                  cp -r /tmp/repo/\$(params.bootc-build-files-repo-subpath)/* \$(workspaces.output.path)/
          EOFUP



          done
          echo "Environment ready!"
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - "ALL"
          runAsNonRoot: true
          seccompProfile:
            type: RuntimeDefault
      restartPolicy: OnFailure
  backoffLimit: 1

