---
apiVersion: batch/v1
kind: Job
metadata:
  name: user-namespaces-create
  namespace: openshift-gitops
  annotations:
    argocd.argoproj.io/sync-wave: "2"
    argocd.argoproj.io/sync-options: Delete=true
spec:
  template:
    spec:
      serviceAccountName: openshift-gitops-argocd-application-controller
      containers:
      - name: shell
        image: quay.io/luisarizmendi/ocp-job:latest  
        command: ["/bin/sh", "-c"]
        args:
        - |
          apply_with_retries() {
            local attempt=0
            local max_attempts=5
            local delay=5

            while true; do
              if "$@"; then
                echo "Apply succeeded: $*"
                return 0
              fi

              attempt=$(( attempt + 1 ))
              if [ "$attempt" -ge "$max_attempts" ]; then
                echo "Apply failed after $max_attempts attempts: $*"
                return 1
              fi

              echo "Apply failed, retrying in $delay seconds... (attempt $attempt)"
              sleep "$delay"
            done
          }

          apply_with_retries  oc apply -f - <<EOF
          ---
          apiVersion: rbac.authorization.k8s.io/v1
          kind: ClusterRoleBinding
          metadata:
            name: redhat-cluster-admin
          roleRef:
            apiGroup: rbac.authorization.k8s.io
            kind: ClusterRole
            name: cluster-admin
          subjects:
          - kind: User
            name: redhat
            apiGroup: rbac.authorization.k8s.io
          EOF

          # Loop through users user01 to user50 and user99
          for i in $(seq -w 1 50) 99; do
            username="user$i"
            password="redhat$i"

             namespace=${username}-ai
            echo "Creating $namespace"
          apply_with_retries  oc apply -f - <<EOF
          ---
          apiVersion: v1
          kind: Namespace
          metadata:
            name: $namespace
          ---
          apiVersion: rbac.authorization.k8s.io/v1
          kind: RoleBinding
          metadata:
            name: ${username}-admin
            namespace: $namespace
          roleRef:
            apiGroup: rbac.authorization.k8s.io
            kind: ClusterRole
            name: admin
          subjects:
          - kind: User
            name: ${username}
            apiGroup: rbac.authorization.k8s.io
          ---
          EOF


            namespace=${username}-tools
            echo "Creating $namespace"

          apply_with_retries  oc apply -f - <<EOF
          apiVersion: v1
          kind: Namespace
          metadata:
            name: $namespace
          ---
          apiVersion: rbac.authorization.k8s.io/v1
          kind: RoleBinding
          metadata:
            name: ${username}-admin
            namespace: $namespace
          roleRef:
            apiGroup: rbac.authorization.k8s.io
            kind: ClusterRole
            name: admin
          subjects:
          - kind: User
            name: ${username}
            apiGroup: rbac.authorization.k8s.io
          ---
          kind: Secret
          apiVersion: v1
          metadata:
            name: quay-local-push-secret
            namespace: $namespace
          stringData:
            .dockerconfigjson: |
              {
                "auths": {
                  "workshop-registry-quay-app.openshift-operators.svc.cluster.local": {
                    "auth": "$(echo -n $username:$password | base64)"
                  },
                  "workshop-registry-quay-openshift-operators.$(oc get ingress.config.openshift.io cluster -o jsonpath='{.spec.domain}')": {
                    "auth": "$(echo -n $username:$password | base64)"
                  }
                }
              }

          ---
          kind: ConfigMap
          apiVersion: v1
          metadata:
            name: workshop-user-data
            namespace: $namespace
            annotation:
              workshop/user: ${username}
          stringData:
            username: ${username}
          EOF


            namespace=${username}-workshop-guide
            echo "Creating $namespace"

          apply_with_retries  oc apply -f - <<EOF
          ---
          apiVersion: v1
          kind: Namespace
          metadata:
            name: $namespace
          ---
          apiVersion: rbac.authorization.k8s.io/v1
          kind: RoleBinding
          metadata:
            name: ${username}-admin
            namespace: $namespace
          roleRef:
            apiGroup: rbac.authorization.k8s.io
            kind: ClusterRole
            name: admin
          subjects:
          - kind: User
            name: ${username}
            apiGroup: rbac.authorization.k8s.io
          ---
          EOF


            namespace=${username}-test
            echo "Creating $namespace"

          apply_with_retries  oc apply -f - <<EOF
          ---
          apiVersion: v1
          kind: Namespace
          metadata:
            name: $namespace
          ---
          apiVersion: rbac.authorization.k8s.io/v1
          kind: RoleBinding
          metadata:
            name: ${username}-admin
            namespace: $namespace
          roleRef:
            apiGroup: rbac.authorization.k8s.io
            kind: ClusterRole
            name: admin
          subjects:
          - kind: User
            name: ${username}
            apiGroup: rbac.authorization.k8s.io
          ---
          apiVersion: rbac.authorization.k8s.io/v1
          kind: Role
          metadata:
            name: job-access-role
            namespace: $namespace
          rules:
            - apiGroups: ["route.openshift.io"]
              resources: ["routes"]
              verbs: ["get", "list", "create"]
            - apiGroups: ["serving.kserve.io"]
              resources: ["inferenceservices"]
              verbs: ["get", "list"]
            - apiGroups: ["apps"]
              resources: ["deployments"]
              verbs: ["get", "list", "create"]
            - apiGroups: [""]
              resources: ["services"]
              verbs: ["get", "list", "create"]
          ---
          apiVersion: rbac.authorization.k8s.io/v1
          kind: RoleBinding
          metadata:
            name: job-access-rolebinding
            namespace: $namespace
          subjects:
            - kind: ServiceAccount
              name: default
              namespace: $namespace
          roleRef:
            kind: Role
            name: job-access-role
            apiGroup: rbac.authorization.k8s.io         
          EOF

          done 

          echo "Environment ready!"
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - "ALL"
          runAsNonRoot: true
          seccompProfile:
            type: RuntimeDefault
      restartPolicy: OnFailure
  backoffLimit: 1
