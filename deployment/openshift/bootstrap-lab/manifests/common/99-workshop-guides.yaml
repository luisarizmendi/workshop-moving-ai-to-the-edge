---
apiVersion: batch/v1
kind: Job
metadata:
  name: workshop-guides-create
  namespace: openshift-gitops
  annotations:
    argocd.argoproj.io/sync-wave: "99"
spec:
  template:
    spec:
      serviceAccountName: openshift-gitops-argocd-application-controller
      containers:
      - name: shell
        image: quay.io/luisarizmendi/ocp-job:latest  
        command: ["/bin/sh", "-c"]
        args:
        - |
          export HOME=/tmp  # Fix permission issues

          # Loop through users user01 to user50 and user99
          for i in $(seq -w 1 50) 99; do

            echo "Extracting variables"

            NAMESPACE="user${i}-workshop-guide"
            CLUSTER_DOMAIN=$(oc get ingresses.config.openshift.io cluster -o jsonpath='{.spec.domain}')

            while ! oc get secret user${i}-ai-models -n user${i}-tools &>/dev/null; do
                echo "Waiting for secret user${i}-ai-models..."
                sleep 2
            done

            while ! oc get secret user${i}-ai-pipeline -n user${i}-tools &>/dev/null; do
                echo "Waiting for secret user${i}-ai-pipeline..."
                sleep 2
            done

            MODELS_ACCESS_KEY=$(oc get secret user${i}-ai-models -n user${i}-tools -o jsonpath='{.data.AWS_ACCESS_KEY_ID}' | base64 --decode && echo)
            MODELS_SECRET_KEY=$(oc get secret user${i}-ai-models -n user${i}-tools -o jsonpath='{.data.AWS_SECRET_ACCESS_KEY}' | base64 --decode && echo)
            PIPELINES_ACCESS_KEY=$(oc get secret user${i}-ai-pipeline -n user${i}-tools -o jsonpath='{.data.AWS_ACCESS_KEY_ID}' | base64 --decode && echo)
            PIPELINES_SECRET_KEY=$(oc get secret user${i}-ai-pipeline -n user${i}-tools -o jsonpath='{.data.AWS_SECRET_ACCESS_KEY}' | base64 --decode && echo)


          echo "Creating values.yaml for user user${i}..."
          
          cat <<EOF > /tmp/values-user${i}.yaml
          # Common
          id: $i
          user: user${i}
          password: redhat$i
          ocp_cluster_url: $CLUSTER_DOMAIN
          git-workshop-url: https://github.com/luisarizmendi/workshop-moving-ai-to-the-edge
          openshift-user: user${i}
          openshift-password: redhat$i
          # Platform
          # Local Edge Devices to be (hopefully) assigned with corresponding group ids
          device-ip: 192.168.2.0
          device-username: redhat
          device-password: R3dh4t1!
          # Shared Nvidia Device 
          shared-nvidia-ip: 192.168.2.128
          shared-nvidia-user: admin
          shared-nvidia-pass: R3dh4t1!
          # Router / dns / dhcp
          gateway-dns-dhcp-openwrt: http://192.168.2.1
          wifi_ssid: FriendlyWrt
          wifi_password: password
          # Edge Container Registry
          container-registry-gitea: 192.168.2.200:5000
          container-registry-gitea-user: gitea
          container-registry-gitea-pass: gitea
          # AI
          gitea-user: user${i}
          gitea-password: redhat$i
          object_storage_models_access_key: $MODELS_ACCESS_KEY
          object_storage_models_secret_key: $MODELS_SECRET_KEY
          object_storage_pipeline_access_key: $PIPELINES_ACCESS_KEY
          object_storage_pipeline_secret_key: $PIPELINES_SECRET_KEY
          registry-url: https://quay.io/user/luisarizmendi/
          EOF

          echo "Ensuring the project exists..."
          if ! /usr/bin/oc get project $NAMESPACE >/dev/null 2>&1; then
            /usr/bin/oc new-project $NAMESPACE
          fi

          echo "Running Helm template..."
          helm repo add larizmen-charts https://raw.githubusercontent.com/luisarizmendi/helm-chart-repo/main/packages
          helm repo update

          helm template showroom larizmen-charts/showroom-single-pod --namespace=${NAMESPACE}  \
          --set deployer.domain=${CLUSTER_DOMAIN} \
          --set-file content.user_data=/tmp/values-user${i}.yaml \
          --set proxy.resources.requests.memory=30Mi \
          --set proxy.resources.requests.cpu=30m \
          --set content.resources.requests.memory=30Mi \
          --set content.resources.requests.cpu=30m \
          --set terminal.resources.requests.memory=30Mi \
          --set terminal.resources.requests.cpu=30m \
          --set ocpconsole.resources.requests.memory=30Mi \
          --set ocpconsole.resources.requests.cpu=30m \
          --set wetty.resources.requests.memory=30Mi \
          --set wetty.resources.requests.cpu=30m \
          --set novnc.resources.requests.memory=30Mi \
          --set novnc.resources.requests.cpu=30m \
          --set content.repoUrl=https://github.com/luisarizmendi/workshop-moving-ai-to-the-edge \
          --set general.guid=1 \
          --set-string content.contentOnly="true" \
          | /usr/bin/oc apply -f -

          done 

          echo "Guides ready!"
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - "ALL"
          runAsNonRoot: true
          seccompProfile:
            type: RuntimeDefault
      restartPolicy: Never
  backoffLimit: 1






