
---
apiVersion: v1
kind: Namespace
metadata:
  name: admin-tools

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: bootc-build-shared-pvc
  namespace: admin-tools
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: bootc-build-entitlements-pvc
  namespace: admin-tools
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
---
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: bootc-image-build
  namespace: admin-tools
spec:
  params:
    - name: bootc-build-files-repo-url
      description: "Repo url with bootc image build files"
      type: string
    - name: bootc-build-files-repo-branch
      description: "Repo branch where bootc image build files are located"
      type: string
      default: "main"
    - name: bootc-build-files-repo-subpath
      description: "Repo subpath where bootc image build files are located"
      default: "."
      type: string
    - name: bootc-image-name
      type: string
      description: "Full image name including registry and tag, for example 'my.registry.io/user/image:tag'"
    - name: bootc-build-export-formats
      description: "Comma-separated target files extensions to be exported (e.g., anaconda-iso,qcow2). If empty there will be no exports"
      default: ""
      type: string
    - name: bootc-build-platforms
      description: "Comma-separated target platforms (e.g., linux/amd64,linux/arm64)"
      default: linux/amd64,linux/arm64
      type: string
    - name: object-storage-endpoint
      description: "Object Storage endpoint where the exported files will be uploaded"
      default: "s3.openshift-storage.svc:443"
      type: string
    - name: object-storage-bucket
      description: "Object Storage bucket where the exported files will be uploaded"
      default: "${username}-bootc-exports"
      type: string

  workspaces:
    - name: shared-workspace
      description: "Workspace used for sharing data between tasks"
    - name: rh-entitlements
      description: "Red Hat Entitlements"
    - name: redhat-pull-secret
      description: "Secret with the Red Hat container registry pull credentials"
    - name: quay-local-push-secret
      description: "Secret with the credentials to push the image"
    - name: redhat-credentials
      description: "Secret with the Red Hat user and password"
    - name: object-storage-credentials
      description: Secret with the object storage credentials
    - name: store
      description: "EmptyDir for image builder used for the osbuild store"
    - name: rpmmd
      description: "EmptyDir for image builder used for the DNF cache"
    - name: varlibcontainerstorage
      description: "EmptyDir for image builder used for containerstorage"

  tasks:


    - name: get-build-files
      taskRef:
        name: git-clone-and-copy-subpath
        kind: Task
      params:
        - name: bootc-build-files-repo-url
          value: $(params.bootc-build-files-repo-url)
        - name: bootc-build-files-repo-branch
          value: $(params.bootc-build-files-repo-branch)
        - name: bootc-build-files-repo-subpath
          value: $(params.bootc-build-files-repo-subpath)
      workspaces:
        - name: output
          workspace: shared-workspace 

    - name: gather-rh-entitlements
      taskRef:
        name: gather-rh-entitlements
        kind: Task
      runAfter:
        - get-build-files
      params:
        - name: PLATFORMS
          value: $(params.bootc-build-platforms)
      workspaces:
        - name: source
          workspace: shared-workspace
        - name: rh-entitlements
          workspace: rh-entitlements
        - name: redhat-credentials
          workspace: redhat-credentials
        - name: redhat-pull-secret
          workspace: redhat-pull-secret


    - name: build-push-and-export
      runAfter:
        - gather-rh-entitlements
      taskRef:
        name: bootc-build-push-and-export
        kind: Task
      params:
        - name: IMAGE
          value: $(params.bootc-image-name)
        - name: PLATFORMS
          value: $(params.bootc-build-platforms)
        - name: EXPORTS
          value: $(params.bootc-build-export-formats)
      workspaces:
        - name: source
          workspace: shared-workspace
        - name: rh-entitlements
          workspace: rh-entitlements
        - name: redhat-credentials
          workspace: redhat-credentials
        - name: redhat-pull-secret
          workspace: redhat-pull-secret
        - name: quay-local-push-secret
          workspace: quay-local-push-secret
        - name: store
          workspace: store
        - name: rpmmd
          workspace: rpmmd
        - name: varlibcontainerstorage
          workspace: varlibcontainerstorage


    - name: upload-exports
      runAfter:
        - build-push-and-export
      taskRef:
        name: upload-files-object-storage
        kind: Task
      when:
        - input: "$(params.bootc-build-export-formats)"
          operator: notin
          values: ["", '""', "''"] 
      params:
        - name: STORAGE-ENDPOINT
          value: $(params.object-storage-endpoint)
        - name: STORAGE-BUCKET
          value: $(params.object-storage-bucket)
        - name: SUBPATH
          value: "exports"
      workspaces:
        - name: source
          workspace: shared-workspace
        - name: object-storage-credentials
          workspace: shared-workspace

---


apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: gather-rh-entitlements
  namespace: admin-tools
spec:
  params:
    - name: PLATFORMS
      description: Comma-separated target platforms (e.g., linux/amd64,linux/arm64)
      default: linux/amd64,linux/arm64
    - name: CONTEXT
      description: Build context
      default: ./
  workspaces:
    - name: source
    - name: rh-entitlements
      mountPath: /root/redhat-entitlements
    - name: redhat-pull-secret
      optional: true
      mountPath: /root/redhat-pull-secret
    - name: redhat-credentials
      optional: true
      mountPath: /root/redhat-credentials
  steps:
    - name: build-and-save
      image: quay.io/centos-bootc/bootc-image-builder:latest
      securityContext:
        privileged: true  # Required for QEMU & binfmt_misc
        runAsUser: 0
        seLinuxOptions:
          type: container_file_t
      workingDir: $(workspaces.source.path)
      script: |
        #!/bin/bash
        set -e
        declare -A RUN_GATHERING
        echo "Checking if there are already entitlements"
        echo "Contents:"
        ls -r /root/redhat-entitlements
        ALL_OK=true

        for arch in $(echo $(params.PLATFORMS) | tr ',' ' '); do
          DIR="/root/redhat-entitlements/${arch##*/}"
          echo "Checking: $DIR"

          if [ ! -d "$DIR" ]; then
            echo "Directory does not exist: $DIR"
            ALL_OK=false
            RUN_GATHERING["${arch##*/}"]="true"
          fi

          # Check for at least one file (not directory) in $DIR
          if ! find "$DIR" -mindepth 1 -maxdepth 1 -type f | grep -q .; then
            echo "No files found in: $DIR"
            ALL_OK=false
            RUN_GATHERING["${arch##*/}"]="true"
          else 

            RUN_GATHERING["${arch##*/}"]="false"
          fi
        done

        echo "Check results:"
        echo "ALL_OK= $ALL_OK"
        for key in "${!RUN_GATHERING[@]}"; do
          echo "$key ${RUN_GATHERING[$key]}"
        done

        if [ "$ALL_OK" = "false" ]; then

          echo "Enabling binfmt_misc for cross-arch builds..."
          podman run --rm --privileged docker.io/multiarch/qemu-user-static --reset -p yes


          echo "-------------------------------------------------------------------------------"
          if [ -d "/root/redhat-credentials" ]; then
            echo "Getting the entitlements..."
            echo "Generating Containerfile to gather entitlements"
            echo "Contents of context:"
            ls $(params.CONTEXT)
            for file in $(params.CONTEXT)/Dockerfile $(params.CONTEXT)/Containerfile; do
              if [[ -f "$file" ]]; then
                from_line=$(grep -E '^FROM ' "$file")
                if [[ -n "$from_line" ]]; then
                  export FROM_IMAGE=$(echo "$from_line" | awk '{print $2}')
                  echo "Imagen base encontrada en $file: $FROM_IMAGE"
                  break
                fi
              fi
            done
            if [[ -z "$FROM_IMAGE" ]]; then
              echo "FROM statement not found in Dockerfile or Containerfile"
            fi

        cat <<EOF > Containerfile.subs
        FROM $FROM_IMAGE
        EOF
        cat <<'EOF' >> Containerfile.subs
        RUN if [ -f /run/secrets/username ] && [ -f /run/secrets/password ]; then \
            echo "Registering with Red Hat subscription manager..."  && rm -rf /etc/rhsm-host && subscription-manager register --username $(cat /run/secrets/username) --password $(cat /run/secrets/password) | tee /tmp/register_output && echo $(grep -o 'ID: [a-f0-9-]*' /tmp/register_output | cut -d' ' -f2) > /etc/rhsm/system_id && echo $(grep -o 'system name is: [a-f0-9-]*' /tmp/register_output | cut -d' ' -f4) > /etc/rhsm/host_id && rm -f /tmp/register_output ; \
            else \
            echo "Red Hat credentials not found; skipping subscription registration."; \
            fi
        RUN dnf -y --nogpgcheck install curl jq && dnf clean all
        RUN mkdir -p /entitlements && cp -a /etc/pki/entitlement/* /entitlements/
        RUN if [ -f /run/secrets/username ] && [ -f /run/secrets/password ]; then \
            echo "Unregistering from Red Hat Cloud inventory..." && for uuid in $(curl -s -u "$(cat /run/secrets/username):$(cat /run/secrets/password)" https://cloud.redhat.com/api/inventory/v1/hosts?fqdn=$(cat /etc/rhsm/host_id) | grep -o '"id":"[^"]*' | grep -o '[^"]*$') ; do curl -u "$(cat /run/secrets/username):$(cat /run/secrets/password)" -X DELETE https://cloud.redhat.com/api/inventory/v1/hosts/$uuid -H  "accept: */*" ;done && subscription-manager unregister && subscription-manager clean && ln -s /run/secrets/rhsm /etc/rhsm-host; \
            else \
            echo "Red Hat credentials not found; skipping subscription clean-up."; \
            fi
        EOF
            echo "Containerfile generated:"
            cat Containerfile.subs


            echo "Contents in entitlement directory:"
            ls -r /root/redhat-entitlements/

            for arch in $(echo $(params.PLATFORMS) | tr ',' ' '); do

                key="${arch##*/}"
                if [ "${RUN_GATHERING[$key]}" = "true" ]; then
                  echo "Gathering entitlements for ${arch##*/}"
                  mkdir -p entitlements/${arch##*/}
                  podman build -f Containerfile.subs --authfile /root/redhat-pull-secret/.dockerconfigjson  --volume /root/redhat-credentials:/run/secrets:ro --platform ${arch##*/} -t local-${arch##*/} .
                  CONTAINER_ID=$(podman create local-${arch##*/})
                  podman cp ${CONTAINER_ID}:/entitlements/. entitlements/${arch##*/}/
                  podman rm ${CONTAINER_ID}
                  podman rmi local-${arch##*/}
                  mkdir -p /root/redhat-entitlements/${arch##*/}
                  cp -r entitlements/${arch##*/}/* /root/redhat-entitlements/${arch##*/}

                fi

            done

            echo "Entitlements generated:"
            ls -R $(workspaces.rh-entitlements.path)
          fi
        fi



---
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: bootc-build-push-and-export
  namespace: admin-tools
spec:
  params:
    - name: IMAGE
      description: Full image name including registry
    - name: CONTAINERFILE
      description: Path to Containerfile
      default: ./Containerfile
    - name: CONTEXT
      description: Build context
      default: ./
    - name: PLATFORMS
      description: Comma-separated target platforms (e.g., linux/amd64,linux/arm64)
      default: linux/amd64,linux/arm64
    - name: EXPORTS
      description: Comma-separated target files extensions to be exported (e.g., anaconda-iso,qcow2)
      default: ""
  workspaces:
    - name: source
    - name: rh-entitlements
      optional: true
      mountPath: /root/rh-entitlements
    - name: redhat-pull-secret
      optional: true
      mountPath: /root/redhat-pull-secret
    - name: quay-local-push-secret
      optional: true
      mountPath: /root/quay-local-push-secret
    - name: redhat-credentials
      optional: true
      mountPath: /root/redhat-credentials
    - name: store
      mountPath: /store
    - name: rpmmd
      mountPath: /rpmmd
    - name: varlibcontainerstorage
      mountPath: /var/lib/containers/storage
  steps:
    - name: build-push-and-export
      image: quay.io/centos-bootc/bootc-image-builder:latest
      securityContext:
        privileged: true  # Required for QEMU & binfmt_misc
        runAsUser: 0
        seLinuxOptions:
          type: container_file_t
      workingDir: $(workspaces.source.path)
      script: |
        #!/bin/bash
        set -e
        export IMAGE=$(params.IMAGE)
        IMAGE="${IMAGE#http://}"
        IMAGE="${IMAGE#https://}"
        IMAGE="${IMAGE//\/\//\/}"
        IMAGE_NAME_TAG="${IMAGE##*/}"
        IMAGE_NAME="${IMAGE_NAME_TAG%%:*}"
        IMAGE_TAG="${IMAGE_NAME_TAG##*:}"
        PWD=$(pwd)

        echo "Enabling binfmt_misc for cross-arch builds..."
        podman run --rm --privileged docker.io/multiarch/qemu-user-static --reset -p yes

        echo "Moving Entitlements"
        mkdir -p /etc/pki/entitlement
        find $(workspaces.rh-entitlements.path)/ -type f -exec cp {} /etc/pki/entitlement \;


        echo "-------------------------------------------------------------------------------"
        echo "Creating multiarch manifest: $IMAGE"
        for arch in $(echo $(params.PLATFORMS) | tr ',' ' '); do
          tag="${arch//\//-}"
          echo "Building for $arch -> $tag"

          podman build --authfile /root/redhat-pull-secret/.dockerconfigjson \
                        --platform ${arch##*/} -f $(params.CONTAINERFILE) -t $IMAGE-$tag $(params.CONTEXT)

          podman push --authfile=/root/quay-local-push-secret/.dockerconfigjson $IMAGE-$tag
          
        done
        echo "Creating and pushing manifest list..."
        podman manifest create $IMAGE
        for arch in $(echo $(params.PLATFORMS)  | tr ',' ' '); do
          tag="${arch//\//-}"
          podman manifest add $IMAGE $IMAGE-$tag
        done
        podman manifest push --authfile=/root/quay-local-push-secret/.dockerconfigjson --all $IMAGE docker://$IMAGE


        echo "-------------------------------------------------------------------------------"
        if [ -n "$(params.EXPORTS)" ]; then
          echo "Starting the image export."

          for arch in $(echo $(params.PLATFORMS) | tr ',' ' '); do
            IMAGE_TAG="${IMAGE_TAG//./_}"
            DIR_NAME="${IMAGE_NAME}_${IMAGE_TAG}_${arch##*/}"
            rm -rf exported && mkdir -p exported/$DIR_NAME

            tag="${arch//\//-}"
            # Convert comma-separated to space-separated
            IFS=',' read -ra items <<< "$(params.EXPORTS)"
            echo "Converting to: ${items[@]}" 

            for item in "${items[@]}"; do
              echo "Exporting $item ..."
              BUILD_BASE_IMAGE=$IMAGE-$tag

              podman run  \
                --platform=${arch} \
                --rm \
                --privileged \
                --pull=newer \
                --security-opt label=type:unconfined_t \
                -v ./config.toml:/config.toml:ro \
                -v ./exported/$DIR_NAME:/output \
                -v $(workspaces.varlibcontainerstorage.path):/var/lib/containers/storage \
                quay.io/centos-bootc/bootc-image-builder:latest --type $item --use-librepo=True $BUILD_BASE_IMAGE
            done
          done

          echo "Files exported:"
          ls -R exported/
        fi


---
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: upload-files-object-storage
  namespace: admin-tools
spec:
  params:
    - name: STORAGE-ENDPOINT
      description: The object storage endpoint URL
      type: string
    - name: STORAGE-BUCKET
      description: The object storage bucket name
      type: string
    - name: SUBPATH
      description: Subdirectory path where the files are hosted
      type: string
      default: "."
    - name: REGION
      description: The object storage region
      type: string
      default: "local"
  workspaces:
    - name: source
      description: Workspace where the files are contained
    - name: object-storage-credentials
      description: Secret with the object storage credentials
  steps:
    - name: upload-files
      image: quay.io/luisarizmendi/ocp-job:latest
      env:
      - name: AWS_ACCESS_KEY_ID
        valueFrom:
          secretKeyRef:
            name: $(workspaces.object-storage-credentials.secret.secretName)
            key: AWS_ACCESS_KEY_ID
      - name: AWS_SECRET_ACCESS_KEY
        valueFrom:
          secretKeyRef:
            name: $(workspaces.object-storage-credentials.secret.secretName)
            key: AWS_SECRET_ACCESS_KEY
      script: |
        #!/bin/sh
        set -e
        export AWS_REGION="$(params.REGION)"
        export AWS_ENDPOINT_URL="$(params.STORAGE-ENDPOINT)"
        export BUCKET="$(params.STORAGE-BUCKET)"
        export SUBPATH="$(params.SUBPATH)"
        
        cd $(workspaces.source.path)/${SUBPATH}
        
        echo "Files to be uploaded from $(pwd):"
        find . -type f | sort
                          
        echo "Uploading files to s3://${BUCKET}/${SUBPATH}"
        aws s3 sync . s3://${BUCKET}/${SUBPATH} \
          --endpoint-url=${AWS_ENDPOINT_URL} \
          --no-verify-ssl \
          --no-progress
        
        echo "Upload completed successfully"
        echo "Objects in bucket:"
        aws s3 ls s3://${BUCKET}/${SUBPATH} --recursive --endpoint-url=${AWS_ENDPOINT_URL} --no-verify-ssl

---
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: git-clone-and-copy-subpath
  namespace: admin-tools
spec:
  params:
    - name: bootc-build-files-repo-url
      description: The git repository URL to clone
    - name: bootc-build-files-repo-branch
      description: The branch to checkout
      default: main
    - name: bootc-build-files-repo-subpath
      description: Subdirectory path to copy from the cloned repo
      default: "."
  workspaces:
    - name: output
      description: Target workspace where the files will be copied
  steps:
    - name: clone-and-copy
      image: alpine/git:latest
      script: |
        #!/bin/sh
        set -e

        echo "Cloning repo: $(params.bootc-build-files-repo-url)"
        rm -rf /tmp/repo && git clone --depth 1 --branch $(params.bootc-build-files-repo-branch) $(params.bootc-build-files-repo-url) /tmp/repo

        echo "Copying subpath: $(params.bootc-build-files-repo-subpath)"
        rm -rf $(workspaces.output.path)/* 
        cp -r /tmp/repo/$(params.bootc-build-files-repo-subpath)/* $(workspaces.output.path)/

