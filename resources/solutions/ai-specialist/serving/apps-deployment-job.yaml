apiVersion: batch/v1
kind: Job
metadata:
  generateName: dashboard-deploy-
spec:
  selector: {}
  template:
    metadata:
      name: dashboard-deploy
    spec:
      containers:
        - name: shell
          image: quay.io/luisarizmendi/ocp-job:latest  
          command: ["/bin/sh", "-c"]
          args:
          - |
            NAMESPACE=$(< /var/run/secrets/kubernetes.io/serviceaccount/namespace)
            echo "Using namespace $NAMESPACE"

            echo "Creating Dashboard Backend"

            oc apply -f - <<EOF
            apiVersion: apps/v1
            kind: Deployment
            metadata:
              name: object-detection-dashboard-backend
              labels:
                app: object-detection-dashboard
                app.kubernetes.io/part-of: Dashboard
                app.openshift.io/runtime: "python"
            spec:
              replicas: 1
              selector:
                matchLabels:
                  app: object-detection-dashboard
                  component: backend
              template:
                metadata:
                  labels:
                    app: object-detection-dashboard
                    component: backend
                spec:
                  containers:
                  - name: backend
                    image: quay.io/luisarizmendi/object-detection-dashboard-backend:v1
                    ports:
                    - containerPort: 5005
            ---
            apiVersion: v1
            kind: Service
            metadata:
              name: object-detection-dashboard-backend
              labels:
                app: object-detection-dashboard
            spec:
              selector:
                app: object-detection-dashboard
                component: backend
              ports:
              - protocol: TCP
                port: 5005
                targetPort: 5005
              type: ClusterIP
            ---
            apiVersion: route.openshift.io/v1
            kind: Route
            metadata:
              name: object-detection-dashboard-backend
              labels:
                app: object-detection-dashboard
            spec:
              to:
                kind: Service
                name: object-detection-dashboard-backend
              port:
                targetPort: 5005
            EOF

            while true; do
              HOST=$(oc get route object-detection-dashboard-backend -n $NAMESPACE -o jsonpath='{.status.ingress[0].host}')
              if [[ -n "$HOST" ]]; then
                BACKEND_API_BASE_URL="http://$HOST"
                break
              fi
              sleep 2
            done
            echo "BACKEND API URL: $BACKEND_API_BASE_URL"

            echo "Creating Dashboard Frontend"

            oc apply -f - <<EOF
            apiVersion: apps/v1
            kind: Deployment
            metadata:
              name: object-detection-dashboard-frontend
              labels:
                app: object-detection-dashboard
                app.kubernetes.io/part-of: Dashboard
                app.openshift.io/runtime: "nodejs"
              annotations:
                app.openshift.io/connects-to: '[{"apiVersion":"apps/v1","kind":"Deployment","name":"object-detection-dashboard-backend"}]'
            spec:
              replicas: 1
              selector:
                matchLabels:
                  app: object-detection-dashboard
                  component: frontend
              template:
                metadata:
                  labels:
                    app: object-detection-dashboard
                    component: frontend
                spec:
                  containers:
                  - name: frontend
                    image: quay.io/luisarizmendi/object-detection-dashboard-frontend:v1
                    ports:
                    - containerPort: 3000
                    env:
                    - name: BACKEND_API_BASE_URL
                      value: $BACKEND_API_BASE_URL
            ---
            apiVersion: v1
            kind: Service
            metadata:
              name: object-detection-dashboard-frontend
              labels:
                app: object-detection-dashboard
            spec:
              selector:
                app: object-detection-dashboard
                component: frontend
              ports:
              - protocol: TCP
                port: 3000
                targetPort: 3000
              type: ClusterIP
            ---
            apiVersion: route.openshift.io/v1
            kind: Route
            metadata:
              name: object-detection-dashboard-frontend
              labels:
                app: object-detection-dashboard
            spec:
              to:
                kind: Service
                name: object-detection-dashboard-frontend
              port:
                targetPort: 3000
            EOF

      restartPolicy: Never