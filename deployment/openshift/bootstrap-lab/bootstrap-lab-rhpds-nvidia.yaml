
#
# Deploy in the "RHOAI on OCP on AWS with NVIDIA GPUs" lab
#
---
apiVersion: user.openshift.io/v1
kind: Group
metadata:
  name: cluster-admins
users:
  - admin

---
apiVersion: batch/v1
kind: Job
metadata:
  name: bootstrap-lab
  namespace: openshift-gitops
spec:
  template:
    spec:
      serviceAccountName: openshift-gitops-argocd-application-controller
      containers:
      - name: bootstrap-lab
        image: quay.io/luisarizmendi/ocp-job:latest 
        command: ["/bin/sh", "-c"]
        args:
        - |
          # Wait for the GitOps Server to be ready
          until oc get pods -n openshift-gitops | grep 'openshift-gitops-server' | grep 'Running' | grep '1/1'; do
            echo "Waiting for GitOps Server pod to be in Running state..."
            sleep 10
          done

          echo "Adding GitOps console plugin"
          oc apply -f - <<EOF
          apiVersion: batch/v1
          kind: Job
          metadata:
            name: enable-plugin-gitops-plugin
            namespace: openshift-gitops
            annotations:
              argocd.argoproj.io/sync-wave: "3"
          spec:
            template:
              spec:
                serviceAccountName: openshift-gitops-argocd-application-controller
                containers:
                - name: shell
                  image: quay.io/luisarizmendi/ocp-job:latest  
                  command: ["/bin/sh", "-c"]
                  args:
                  - |
                      PLUGIN_NAME="gitops-plugin"
                      existing_plugins=\$(oc get console.operator.openshift.io cluster -o jsonpath='{.spec.plugins[*]}')
                      read -a plugins_array <<< "\$existing_plugins"
                      for plugin in "\${plugins_array[@]}"; do
                          if [[ "\$plugin" == "\$PLUGIN_NAME" ]]; then
                              echo "Plugin \$PLUGIN_NAME is already enabled."
                              exit 0
                          fi
                      done
                      plugins_array+=("\$PLUGIN_NAME")
                      json_array=\$(printf '%s\n' "\${plugins_array[@]}" | jq -R . | jq -s .)

                      echo "Patching with new plugins: \$json_array"
                      oc patch console.operator.openshift.io cluster --type=json -p="[{'op': 'add', 'path': '/spec/plugins', 'value': \$json_array }]"

                      echo "Enabled plugins in the console:"
                      oc get console.operator.openshift.io cluster -o jsonpath='{.spec.plugins}'
                  securityContext:
                    allowPrivilegeEscalation: false
                    capabilities:
                      drop:
                        - "ALL"
                    runAsNonRoot: true
                    seccompProfile:
                      type: RuntimeDefault
                restartPolicy: Never
            backoffLimit: 1
          EOF

          oc apply -f - <<EOF
          apiVersion: argoproj.io/v1alpha1
          kind: ApplicationSet
          metadata:
            name: bootstrap-lab
            namespace: openshift-gitops
          spec:
            goTemplate: true
            goTemplateOptions: ["missingkey=error"]
            generators:
            - git:
                repoURL: https://github.com/luisarizmendi/workshop-moving-ai-to-the-edge.git
                revision: main
                directories:
                - path: deployment/openshift/bootstrap-lab/manifests/*
                - path: deployment/openshift/bootstrap-lab/manifests/openshift-ai-base
                  exclude: true
                - path: deployment/openshift/bootstrap-lab/manifests/pipelines
                  exclude: true
                - path: deployment/openshift/bootstrap-lab/manifests/gitea
                  exclude: true
                - path: deployment/openshift/bootstrap-lab/manifests/minio
                  exclude: true
                - path: deployment/openshift/bootstrap-lab/manifests/nvidia-operator
                  exclude: true
                - path: deployment/openshift/bootstrap-lab/manifests/nfd
                  exclude: true
            template:
              metadata:
                name: '{{.path.basename}}'
              spec:
                project: default
                source:
                  repoURL: https://github.com/luisarizmendi/workshop-moving-ai-to-the-edge.git
                  targetRevision: main
                  path: '{{.path.path}}'
                destination:
                  server: https://kubernetes.default.svc
                syncPolicy:
                  automated:
                    prune: false
                    selfHeal: true
                ignoreDifferences:
                  - group: ""
                    kind: Secret
                    name: v4-0-config-user-idp-1-file-data
                    jsonPointers:
                      - /
          EOF
          # Wait for the DataScienceCluster to be ready
          until oc get pods -n redhat-ods-applications | grep 'odh-model-controller' | grep 'Running' | grep '1/1'; do
            echo "Waiting for DataScienceCluster pod to be in Running state..."
            sleep 10
          done
          sleep 60
          oc apply -f - <<EOF
          apiVersion: batch/v1
          kind: Job
          metadata:
            name: bootstrap-lab-ds-patch
            namespace: openshift-gitops
          spec:
            template:
              spec:
                serviceAccountName: openshift-gitops-argocd-application-controller
                containers:
                - name: bootstrap-lab
                  image: quay.io/openshift/origin-cli:latest  
                  command: ["/bin/sh", "-c"]
                  args:
                  - |
                    #
                    oc patch datasciencecluster default-dsc --type='json' -p='[
                      {
                        "op": "replace",
                        "path": "/spec/components/modelregistry/managementState",
                        "value": "Managed"
                      }
                    ]'
                  securityContext:
                    allowPrivilegeEscalation: false
                    capabilities:
                      drop:
                        - "ALL"
                    runAsNonRoot: true
                    seccompProfile:
                      type: RuntimeDefault
                restartPolicy: Never
            backoffLimit: 1
          EOF

          echo "Environment ready!"
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - "ALL"
          runAsNonRoot: true
          seccompProfile:
            type: RuntimeDefault
      restartPolicy: Never
  backoffLimit: 1
